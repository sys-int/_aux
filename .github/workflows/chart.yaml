name: ci

on:
  workflow_call:
    inputs:
      version:
        required: true
        type: string
    secrets:
      VAULT_ADDR:
        required: true
      TOKEN:
        required: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Import Secrets
        id: secrets
        uses: hashicorp/vault-action@v2
        with:
          url: ${{ secrets.VAULT_ADDR }}
          method: github
          githubToken: ${{ secrets.TOKEN }}
          secrets: |
              kv/data/ci/github/workflows HELM_REGISTRY | HELM_REGISTRY ;
              kv/data/ci/github/workflows HELM_USER | HELM_USER ;
              kv/data/ci/github/workflows HELM_PASS | HELM_PASS ;
              kv/data/ci/github/workflows PYPI_SERVER | PYPI_SERVER ;
              kv/data/ci/github/workflows PYPI_USER | PYPI_USER ;
              kv/data/ci/github/workflows PYPI_PASS | PYPI_PASS ;
              kv/data/ci/github/workflows PYPI_REGISTRY | PYPI_REGISTRY ;

      - name: Install deployment
        shell: bash
        run: |
          export PATH=$HOME/.local/bin:$PATH
          printf "%s\n" "machine ${PYPI_SERVER}" "login ${PYPI_USER}" "password ${PYPI_PASS}" > ~/.netrc
          pip install --upgrade -i $PYPI_REGISTRY deployment

      - name: Create helm chart
        shell: bash
        env: 
          VERSION: ${{ inputs.version }}
          GITHUB_TOKEN: ${{ secrets.TOKEN }}
        run: |
          SERVICE=${GITHUB_REPOSITORY#*/}
          PROJECT=${GITHUB_REPOSITORY_OWNER}
          deployment helm $PROJECT $SERVICE $VERSION ./helm

      - name: helm
        shell: bash
        env: 
          VERSION: ${{ inputs.version }}
        run: |
          REP=${GITHUB_REPOSITORY#*/}
          helm registry login $HELM_REGISTRY -u $HELM_USER --password $HELM_PASS
          helm lint ./helm
          helm package ./helm --app-version $VERSION --version $VERSION
          helm push ${REP}-${VERSION}.tgz oci://${HELM_REGISTRY}/${GITHUB_REPOSITORY_OWNER}

name: ci

on:
  workflow_call:
    inputs:
      VERSION:
        required: true
        type: string
    secrets:
      VAULT_ADDR:
        required: true
      TOKEN:
        required: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:

      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo '$GITHUB_CONTEXT'
      - name: Dump job context
        env:
          JOB_CONTEXT: ${{ toJson(job) }}
        run: echo '$JOB_CONTEXT'

      - name: Import Secrets
        id: secrets
        uses: hashicorp/vault-action@v2
        with:
          url: ${{ secrets.VAULT_ADDR }}
          method: github
          githubToken: ${{ secrets.TOKEN }}
          secrets: |
              kv/data/ci/github/workflows DOCKER_REGISTRY | DOCKER_REGISTRY ;
              kv/data/ci/github/workflows DOCKER_USER | DOCKER_USER ;
              kv/data/ci/github/workflows DOCKER_PASS | DOCKER_PASS ;

      - uses: actions/checkout@v3

      - name: ShortSHA
        run: echo "SHORT_SHA=${GITHUB_SHA::7}" >> $GITHUB_ENV

      - name: Check image
        id: image_exists
        continue-on-error: true
        uses: cloudposse/github-action-docker-image-exists@main
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          organization: "${{ github.repository_owner }}"
          repository: "${{ github.event.repository.name }}"
          login: "${{ env.DOCKER_USER }}"
          password: "${{ env.DOCKER_PASS }}"
          tag: latest

      # - name: Install Cosign
      #   uses: sigstore/cosign-installer@v3.1.0
      #   with:
      #     cosign-release: 'v2.1.0' # optional

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      # - name: Set up Docker Buildx
      #   uses: docker/setup-buildx-action@v2

      # - name: Docker meta
      #   if: ${{ steps.image_exists.outputs.conclusion == false }}
      #   id: meta
      #   uses: docker/metadata-action@v4
      #   with:
      #     images: |
      #       ${{ format('{0}/{1}', env.DOCKER_REGISTRY, github.repository) }}
      #     tags: |
      #       type=raw,value=${{ inputs.VERSION }}

      # - name: Login to Docker Hub
      #   uses: docker/login-action@v2
      #   with:
      #     registry: ${{ env.DOCKER_REGISTRY }}
      #     username: ${{ env.DOCKER_USER }}
      #     password: ${{ env.DOCKER_PASS }}

      - name: Log in to registry
        uses: redhat-actions/podman-login@v1
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ env.DOCKER_USER }}
          password: ${{ env.DOCKER_PASS }}


      - name: Build Image
        if: ${{ steps.image_exists.outputs.conclusion == false  }}
        id: build-image
        uses: redhat-actions/buildah-build@v2
        with:
          # image: ${{ format('{0}/{1}', env.DOCKER_REGISTRY, github.repository) }}
          image: ${{ github.repository }}
          tags: ${{ inputs.VERSION }} ${{ env.SHORT_SHA }}
          containerfiles: |
            ./Dockerfile

      - name: Push ro registry
        id: push-to-registry
        uses: redhat-actions/push-to-registry@v2
        with:
          image: ${{ steps.build-image.outputs.image }}
          tags: ${{ steps.build-image.outputs.tags }}
          registry: ${{ env.DOCKER_REGISTRY }}
          # username: ${{ env.DOCKER_USER }}
          # password: ${{ env.DOCKER_PASS }}

      # - name: Build and push
      #   if: ${{ steps.image_exists.outputs.conclusion == false  }}
      #   id: build-and-push
      #   uses: docker/build-push-action@v4
      #   with:
      #     context: .
      #     push: true
      #     tags: ${{ steps.meta.outputs.tags }}
      #     labels: ${{ steps.meta.outputs.labels }}

      # - name: Pull image
      #   if: ${{ steps.image_exists.outputs.conclusion }}
      #   id: pull-image
      #   env: 
      #     VERSION: ${{ inputs.VERSION }}
      #   run: |
      #     docker pull ${IMAGE}:${SHORT_SHA}
      #     docker tag ${IMAGE}:${SHORT_SHA} ${IMAGE}:${VERSION}
      #     docker push

      # - name: Tag and Push
      #   if: ${{ steps.image_exists.outputs.conclusion == false  }}
      #   id: tag-and-push
      #   env: 
      #     VERSION: ${{ inputs.VERSION }}
      #     TAG: ${{ steps.meta.outputs.tags }}
      #     IMAGE: ${{ format('{0}/{1}', env.DOCKER_REGISTRY, github.repository) }}
      #     DIGEST: ${{ steps.build-and-push.outputs.digest }}
      #   shell: bash
      #   run: |
      #     docker tag ${TAG}@${DIGEST} ${IMAGE}:${GITHUB_SHA::7}
      #     docker push

      - name: Get HV Token
        id: get-token
        env:
          TOKEN: ${{ secrets.TOKEN }}
          VAULT_ADDR: ${{ secrets.VAULT_ADDR }}
        run: |
          export vault_token=$(curl -s --request POST -d '{"token":"'"${TOKEN}"'"}' ${VAULT_ADDR}/v1/auth/github/login | jq -r '.auth.client_token')
          echo "VAULT_TOKEN=$vault_token" >> $GITHUB_OUTPUT
        
      # - name: Sign Image
      #   if: ${{ steps.image_exists.outputs.conclusion }}
      #   run: |
      #     cosign sign --yes --key hashivault://cosign "${TAGS}@${DIGEST}"
      #   env:
      #     TAGS: ${{ steps.meta.outputs.tags }}
      #     VAULT_ADDR: ${{ secrets.VAULT_ADDR }}
      #     VAULT_TOKEN: ${{ steps.get-token.outputs.VAULT_TOKEN }}
      #     DIGEST: ${{ steps.build-and-push.outputs.digest }}
